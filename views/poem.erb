

<section class="hero is-primary">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        Your selected poem and recommended poem
      </h1>
    </div>
  </div>
</section>

<section class="section">
	<div class="container">

<div class="columns">
	<div class="column">
		<h1 class="title"><%= @poem[:title] %></h1>
		<h2 class="subtitle"><%= @poem[:poet] %></h2>
		<p><%= @poem_content %></p>
	</div>
	<div class="column">
		<h1 class="title"><%= @rec_poem[:title] %></h1>
		<h2 class="subtitle"><%= @rec_poem[:poet] %></h2>
		<p><%= @rec_content %></p>
	</div>
</div>

	</div>
</section>

<section class="hero is-primary">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        Why was this poem recommended?
      </h1>
    </div>
  </div>
</section>

<section class="section">
	<div class="container">

	<div class="columns">
	<div class="column">
		<p>
		Currently this poetry engine uses a topic modeling algorithm called latent dirichlet allocation (LDA). My favorite layman's explanation of LDA is by <a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/">Edwin Chen on his blog</a>. Basically LDA turns each poem into a bag of words: 12 cases of 'you', 3 cases of 'flower', etc. Then it finds clusters of words that commonly occur in poems together. These are considered the topics. Each poem has a distribution of all topics, a poem might be mostly topic 1 but partly topic 2 and very little topic 3. In this application, there are 20 topics.
		</p>
		<br />
		<p>
		Your recommended poem has similar topics to your selected poem, which mostly means it uses a similar vocabulary.
		</p>
	</div>
	<div class="column">
		<p></p>
	</div>
</div>




	</div>
</section>
